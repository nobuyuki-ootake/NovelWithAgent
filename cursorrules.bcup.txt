# ノベル作成エージェント開発ルール

## プロジェクト概要

このプロジェクトは、AI を活用した小説作成支援ツールの開発です。以下の技術スタックを使用します：

- **フロントエンド**: Next.js 15 (App Router), React 19, TypeScript
- **UI/UX**: Shadcn UI, Radix UI, Tailwind CSS
- **バックエンド**: Express.js, TypeScript
- **AI 統合**: OpenAI, Claude, Gemini API
- **データ管理**: Redis

## 開発プロセス

### 1. 要件分析

- タスクの種類を特定（コード作成、デバッグ、アーキテクチャ設計など）
- 使用する言語とフレームワークを確認
- 明示的・暗黙的な要件を整理
- コアとなる問題と期待される成果を定義
- プロジェクトの文脈と制約を考慮

### 2. ソリューション設計

- 論理的なステップに分解
- モジュール性と再利用性を考慮
- 必要なファイルと依存関係を特定
- 代替アプローチの評価
- テストと検証の計画

### 3. 実装戦略

- 適切なデザインパターンの選択
- パフォーマンスへの影響を考慮
- エラーハンドリングとエッジケースの計画
- アクセシビリティの遵守
- ベストプラクティスとの整合性確認

## コードスタイルと構造

### 基本原則

- 簡潔で読みやすい TypeScript コードを書く
- 関数型プログラミングと宣言的プログラミングパターンを使用
- DRY（Don't Repeat Yourself）原則に従う
- 可読性向上のため早期リターンを実装
- 論理的な構造: exports, サブコンポーネント, ヘルパー, 型

### 命名規則

- 補助動詞を使用した説明的な名前（isLoading, hasError）
- イベントハンドラは"handle"で始める（handleClick, handleSubmit）
- ディレクトリは小文字とハイフンを使用（components/auth-wizard）
- コンポーネントは名前付きエクスポートを優先

### TypeScript 使用

- すべてのコードで TypeScript を使用
- 型よりインターフェースを優先
- enum の代わりに const マップを使用
- 適切な型安全性と推論を実装
- 型検証に`satisfies`演算子を使用

## React 19 と Next.js 15 のベストプラクティス

### コンポーネントアーキテクチャ

- 可能な限り React Server Components（RSC）を使用
- 'use client'ディレクティブを最小限に
- 適切なエラーバウンダリを実装
- 非同期操作に Suspense を使用
- パフォーマンスと Web Vitals の最適化

### 状態管理

- 非推奨の`useFormState`の代わりに`useActionState`を使用
- 新しいプロパティ（data, method, action）を持つ拡張版`useFormStatus`を活用
- URL 状態管理に'nuqs'を使用
- クライアントサイドの状態を最小限に

### 非同期リクエスト API

```typescript
// ランタイムAPIの非同期バージョンを常に使用
const cookieStore = await cookies();
const headersList = await headers();
const { isEnabled } = await draftMode();

// レイアウト/ページでの非同期パラメータ処理
const params = await props.params;
const searchParams = await props.searchParams;
```

## プロキシサーバー実装ガイドライン

### セキュリティ

- すべての API エンドポイントに認証ミドルウェアを適用
- レート制限の実装
- CORS 設定の適切な構成
- 環境変数の安全な管理
- エラーハンドリングの徹底

### パフォーマンス

- Redis キャッシュの活用
- レスポンスの圧縮
- リクエストのバリデーション
- エラーログの適切な管理

### モニタリング

- パフォーマンスメトリクスの収集
- エラーログの集約
- アラート設定の最適化
- ヘルスチェックの実装

## 型定義運用ルール

1.  **型定義の聖域: `packages/types/index.ts`**
    *   プロジェクト全体（フロントエンド、必要に応じてバックエンドも）で使用する全ての汎用的な型定義は、原則として `packages/types/index.ts` ファイル（`@novel-ai-assistant/types` パッケージ）に集約します。
    *   コンポーネント固有のProps型など、特定のアプリケーション（例: `apps/frontend`）の局所的なスコープでのみ使用される型を除き、再利用可能性のある型や複数のアプリケーション/パッケージ間で共有されるべき型は、この共有パッケージの `index.ts` に定義します。
    *   各アプリケーション（例: `apps/frontend`）内のファイル (`.ts`, `.tsx`) での安易な汎用型定義は避け、まずは共有パッケージの `packages/types/index.ts` への追加を検討します。

2.  **`packages/types/index.ts` is King: 型定義の優先順位**
    *   コード実装において、型に関する不整合やLinterエラーが発生した場合、原則として `packages/types/index.ts` に定義された型を **正** とし、**実装側のコードを修正**することで対応します。
    *   `packages/types/index.ts` 内の型定義自体を変更する必要が生じた場合は、その変更がプロジェクト全体に及ぼす影響を慎重に評価し、変更理由と影響範囲を明確にした上で、ユーザー様にご確認と承認を得るプロセスを必ず経るものとします。

3.  **コア型定義の保護: 原則変更不可**
    *   `WorldBuildingElementType`、`BaseWorldBuildingElement`、`NovelProject` の主要構造など、アプリケーションの根幹をなすコアな型定義は、**原則として変更不可**とします。
    *   これらの型にプロパティを追加したり、既存のプロパティの型や意味合いを変更したりすることは、アプリケーションの広範囲に予期せぬ不具合を生む可能性があるため、最大限避けます。
    *   万が一、変更が不可避であると判断される場合でも、その必要性、代替案の検討、影響範囲の徹底的な調査を行い、ユーザー様の明確な承認を得た場合にのみ、慎重に変更作業を行います。特にプロパティの安易な追加は、情報量の肥大化を招き、人間による管理の限界を超えるため、極力行いません。

4.  **バックエンドとの型共有**
    *   `proxy-server` などのバックエンド固有の型定義は、引き続きバックエンドプロジェクト内に配置し、共有パッケージの型定義と明確に分離します。
    *   フロントエンドとバックエンドで共通して使用する必要がある型は、`packages/types/index.ts` （`@novel-ai-assistant/types` パッケージ）に定義し、各アプリケーションから参照します。

5.  **AIアシスタントの遵守事項**
    *   AIアシスタントは、上記のルールを最優先事項として認識し、コード生成、修正提案、リファクタリングの全てのアクションにおいて、これらのルールを厳格に遵守します。
    *   型に関する提案を行う際は、必ず `packages/types/index.ts` を参照し、既存の型定義との整合性を確認します。
    *   新しい型を導入する必要がある場合は、その定義場所としてまず `packages/types/index.ts` を提案します。
