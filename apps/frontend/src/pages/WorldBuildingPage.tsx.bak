import React from "react";
import {
  Box,
  Typography,
  Paper,
  Tabs,
  Tab,
  Button,
  Snackbar,
  Badge,
} from "@mui/material";
import SmartToyIcon from "@mui/icons-material/SmartToy";
import WorldMapTab from "../components/worldbuilding/WorldMapTab";
import SettingTab from "../components/worldbuilding/SettingTab";
import TabPanel from "../components/worldbuilding/TabPanel";
import SocietyCultureTab from "../components/worldbuilding/SocietyCultureTab";
import GeographyEnvironmentTab from "../components/worldbuilding/GeographyEnvironmentTab";
import HistoryLegendTab from "../components/worldbuilding/HistoryLegendTab";
import MagicTechnologyTab from "../components/worldbuilding/MagicTechnologyTab";
import RulesTab from "../components/worldbuilding/RulesTab";
import PlacesTabSimple from "../components/worldbuilding/PlacesTabSimple";
import FreeFieldsTab from "../components/worldbuilding/FreeFieldsTab";
import CharacterStatusList from "../components/characters/CharacterStatusList";
import CharacterStatusEditorDialog from "../components/characters/CharacterStatusEditorDialog";
import { CharacterStatus } from "../types";
import { AIAssistModal } from "../components/modals/AIAssistModal";
import { useRecoilValue } from "recoil";
import { currentProjectState } from "../store/atoms";
import { useWorldBuildingContext } from "../contexts/WorldBuildingContext";

const WorldBuildingPage: React.FC = () => {
  const currentProject = useRecoilValue(currentProjectState);

  // コンテキストから状態とハンドラ関数を取得
  const {
    tabValue,
    mapImageUrl,
    description,
    history,
    rules,
    places,
    freeFields,
    snackbarOpen,
    snackbarMessage,
    handleTabChange,
    handleMapImageUpload,
    handleSettingChange,
    handleHistoryChange,
    handleSaveWorldBuilding,
    handleCloseSnackbar,
    hasUnsavedChanges,
    updatedTabs,
    aiModalOpen,
    setAIModalOpen,
    notificationOpen,
    notificationMessage,
    setNotificationOpen,
  } = useWorldBuildingContext();

  // AIに世界観要素を考えてもらう
  const handleAIAssist = async (message: string) => {
    // AIアシスト実装はコンテキストに移動済み
    console.log("AIアシスト要求:", message);

    // モーダルを閉じる
    setAIModalOpen(false);
  };

  if (!currentProject) {
    return (
      <Box sx={{ p: 3 }}>
        <Typography>プロジェクトが選択されていません。</Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: { xs: 1, sm: 2, md: 3 }, maxWidth: "1200px", mx: "auto" }}>
      <Paper elevation={2} sx={{ p: 2, mb: 3 }}>
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
          }}
        >
          <Box>
            <Typography variant="h4" gutterBottom>
              {currentProject.title}
            </Typography>
            <Typography variant="subtitle1" color="text.secondary">
              世界観構築
            </Typography>
          </Box>
          <Button
            variant="contained"
            color="primary"
            startIcon={<SmartToyIcon />}
            onClick={() => setAIModalOpen(true)}
            sx={{ ml: 2 }}
          >
            AIに世界観を考えてもらう
          </Button>
        </Box>
      </Paper>

      {/* AI支援モーダル */}
      <AIAssistModal
        open={aiModalOpen}
        onClose={() => setAIModalOpen(false)}
        title="AIに世界観を考えてもらう"
        description="どのような世界観にしたいか、指示を入力してください。物語の雰囲気や時代背景、主要な場所などを具体的に伝えるとよいでしょう。"
        defaultMessage={`「${
          currentProject.title
        }」の世界観について、以下の要素を考えてください。
- 物語の舞台となる主要な場所（少なくとも3つ）
- この世界のルール（魔法や技術の制約など）
- 特徴的な文化や風習

物語のあらすじ:
${currentProject.synopsis || "（あらすじが設定されていません）"}`}
        requestAssist={handleAIAssist}
        supportsBatchGeneration={true}
      />

      <Paper
        sx={{
          mb: 3,
          borderRadius: "8px",
          boxShadow: "0 4px 8px rgba(0, 0, 0, 0.1)",
          position: "sticky",
          top: 0,
          zIndex: 10,
          backgroundColor: "background.paper",
        }}
      >
        <Tabs
          value={tabValue}
          onChange={handleTabChange}
          variant="scrollable"
          scrollButtons="auto"
          allowScrollButtonsMobile
          aria-label="world building tabs"
          sx={{
            ".MuiTabs-flexContainer": {
              gap: 1,
            },
            ".MuiTab-root": {
              minWidth: "120px",
              px: 2,
              whiteSpace: "nowrap",
            },
            ".MuiTabs-scrollButtons": {
              "&.Mui-disabled": { opacity: 0.3 },
            },
            mb: 1,
          }}
        >
          <Tab
            label={
              updatedTabs[0] ? (
                <Badge color="secondary" variant="dot">
                  ワールドマップ
                </Badge>
              ) : (
                "ワールドマップ"
              )
            }
            sx={{ fontWeight: tabValue === 0 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[1] ? (
                <Badge color="secondary" variant="dot">
                  世界観設定
                </Badge>
              ) : (
                "世界観設定"
              )
            }
            sx={{ fontWeight: tabValue === 1 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[2] ? (
                <Badge color="secondary" variant="dot">
                  ルール
                </Badge>
              ) : (
                "ルール"
              )
            }
            sx={{ fontWeight: tabValue === 2 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[3] ? (
                <Badge color="secondary" variant="dot">
                  地名
                </Badge>
              ) : (
                "地名"
              )
            }
            sx={{ fontWeight: tabValue === 3 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[4] ? (
                <Badge color="secondary" variant="dot">
                  社会と文化
                </Badge>
              ) : (
                "社会と文化"
              )
            }
            sx={{ fontWeight: tabValue === 4 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[5] ? (
                <Badge color="secondary" variant="dot">
                  地理と環境
                </Badge>
              ) : (
                "地理と環境"
              )
            }
            sx={{ fontWeight: tabValue === 5 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[6] ? (
                <Badge color="secondary" variant="dot">
                  歴史と伝説
                </Badge>
              ) : (
                "歴史と伝説"
              )
            }
            sx={{ fontWeight: tabValue === 6 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[7] ? (
                <Badge color="secondary" variant="dot">
                  魔法と技術
                </Badge>
              ) : (
                "魔法と技術"
              )
            }
            sx={{ fontWeight: tabValue === 7 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[8] ? (
                <Badge color="secondary" variant="dot">
                  自由記述欄
                </Badge>
              ) : (
                "自由記述欄"
              )
            }
            sx={{ fontWeight: tabValue === 8 ? "bold" : "normal" }}
          />
          <Tab
            label={
              updatedTabs[9] ? (
                <Badge color="secondary" variant="dot">
                  状態定義
                </Badge>
              ) : (
                "状態定義"
              )
            }
            sx={{ fontWeight: tabValue === 9 ? "bold" : "normal" }}
          />
        </Tabs>

        {/* ワールドマップタブ */}
        <TabPanel value={tabValue} index={0}>
          <WorldMapTab
            mapImageUrl={mapImageUrl || ""}
            onMapImageUpload={handleMapImageUpload || (() => {})}
          />
        </TabPanel>

        {/* 世界観設定タブ */}
        <TabPanel value={tabValue} index={1}>
          <SettingTab
            description={description || ""}
            onDescriptionChange={handleSettingChange || (() => {})}
            history={history || ""}
            onHistoryChange={handleHistoryChange || (() => {})}
          />
        </TabPanel>

        {/* ルールタブ */}
        <TabPanel value={tabValue} index={2}>
          <RulesTab />
        </TabPanel>

        {/* 地名タブ */}
        <TabPanel value={tabValue} index={3}>
          <PlacesTabSimple />
        </TabPanel>

        {/* 社会と文化タブ */}
        <TabPanel value={tabValue} index={4}>
          <SocietyCultureTab />
        </TabPanel>

        {/* 地理と環境タブ */}
        <TabPanel value={tabValue} index={5}>
          <GeographyEnvironmentTab />
        </TabPanel>

        {/* 歴史と伝説タブ */}
        <TabPanel value={tabValue} index={6}>
          <HistoryLegendTab />
        </TabPanel>

        {/* 魔法と技術タブ */}
        <TabPanel value={tabValue} index={7}>
          <MagicTechnologyTab />
        </TabPanel>

        {/* 自由記述欄タブ */}
        <TabPanel value={tabValue} index={8}>
          <FreeFieldsTab freeFields={freeFields || []} />
        </TabPanel>

        {/* 状態定義タブ */}
        <TabPanel value={tabValue} index={9}>
          <Box sx={{ mt: 2 }}>
            <Typography variant="h6" gutterBottom>
              定義済みキャラクターステータス
            </Typography>
            <Button
              variant="contained"
              onClick={() => {
                // コンテキストから必要な関数がないので実装しない
                console.log("キャラクターステータス追加機能は未実装です");
              }}
              sx={{ mb: 2 }}
            >
              新しい状態を追加
            </Button>
            <CharacterStatusList
              statuses={[]}
              onEdit={() => {
                // コンテキストから必要な関数がないので実装しない
                console.log("キャラクターステータス編集機能は未実装です");
              }}
              onDelete={() => {
                // コンテキストから必要な関数がないので実装しない
                console.log("キャラクターステータス削除機能は未実装です");
              }}
            />
          </Box>
        </TabPanel>
      </Paper>

      <Box sx={{ display: "flex", justifyContent: "flex-end", mt: 2 }}>
        <Button
          variant="contained"
          color="primary"
          size="large"
          onClick={handleSaveWorldBuilding || (() => {})}
          disabled={!hasUnsavedChanges}
        >
          保存
        </Button>
      </Box>

      <Snackbar
        open={snackbarOpen || false}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar || (() => {})}
        message={snackbarMessage || ""}
      />

      <Snackbar
        open={notificationOpen || false}
        autoHideDuration={6000}
        onClose={() => setNotificationOpen && setNotificationOpen(false)}
        message={notificationMessage || ""}
      />
    </Box>
  );
};

export default WorldBuildingPage;
